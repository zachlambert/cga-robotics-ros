<launch>
    <arg name="base_radius" default="0.1"/>
    <arg name="ee_radius" default="0.1"/>
    <arg name="upper_length" default="0.3"/>
    <arg name="lower_length" default="0.4"/>

    <param
        name="robot_description"
        command="xacro '$(find cga_robotics_ros)/model/delta/ros.urdf.xacro' base_radius:=$(arg base_radius) ee_radius:=$(arg ee_radius) upper_length:=$(arg upper_length) lower_length:=$(arg lower_length)"
    />
    <param
        name="robot_description_sdf"
        command="xacro '$(find cga_robotics_ros)/model/delta/gazebo.sdf.xacro' base_radius:=$(arg base_radius) ee_radius:=$(arg ee_radius) upper_length:=$(arg upper_length) lower_length:=$(arg lower_length)"
    />

    <!-- Spawn model in gazebo -->
    <rosparam
        file="$(find cga_robotics_ros)/config/delta_gazebo_control_gains.yaml"
        command="load"
    />
    <node
        name="spawn_model"
        pkg="gazebo_ros"
        type="spawn_model"
        args="-param robot_description_sdf -sdf -x 0 -y 0 -z 0 -model delta -b -gazebo_namespace gzserver"
    />

    <!-- Start ros_control -->
    <rosparam
        file="$(find cga_robotics_ros)/config/delta_controllers.yaml"
        command="load"
    />
    <node
        name="controller_spawner"
        pkg="controller_manager"
        type="spawner"
        respawn="false"
        args="theta_1_controller theta_2_controller theta_3_controller joint_state_controller"
    />

    <!-- Start FK node and robot state publisher -->
    <node
        pkg="cga_robotics_ros"
        type="delta_fk"
        name="delta_fk"
        output="screen">
        <remap from="joint_states_in" to="joint_states"/>
        <remap from="joint_states_out" to="joint_states_complete"/>
        <param name="base_radius" value="$(arg base_radius)"/>
        <param name="ee_radius" value="$(arg ee_radius)"/>
        <param name="upper_length" value="$(arg upper_length)"/>
        <param name="lower_length" value="$(arg lower_length)"/>
    </node>
    <node
        pkg="robot_state_publisher"
        type="robot_state_publisher"
        name="robot_state_publisher">
        <remap from="joint_states" to="joint_states_complete"/>
    </node>

    <!-- Start FK vel node -->
    <node
        pkg="cga_robotics_ros"
        type="delta_fk_vel"
        name="delta_fk_vel"
        output="screen">
        <param name="base_radius" value="$(arg base_radius)"/>
        <param name="ee_radius" value="$(arg ee_radius)"/>
        <param name="upper_length" value="$(arg upper_length)"/>
        <param name="lower_length" value="$(arg lower_length)"/>
    </node>

    <!-- Start joint velocity integrator and vel IK node-->
    <node
        pkg="cga_robotics_ros"
        type="joint_velocity_integrator"
        name="joint_velocity_integrator"
        output="screen">
    <param name="joints" value="theta_1 theta_2 theta_3"/>
    </node>
    <node
        pkg="cga_robotics_ros"
        type="delta_ik_vel"
        name="delta_ik_vel"
        output="screen">
        <param name="base_radius" value="$(arg base_radius)"/>
        <param name="ee_radius" value="$(arg ee_radius)"/>
        <param name="upper_length" value="$(arg upper_length)"/>
        <param name="lower_length" value="$(arg lower_length)"/>
    </node>

    <!-- Start visualisation and rqt for setting ee cmd -->
    <node
        pkg="cga_robotics_ros"
        type="twist_marker"
        name="twist_marker"
    />
    <node
        name="rviz" pkg="rviz" type="rviz"
        args="-d $(find cga_robotics_ros)/config/view_robot_vel.rviz"
    />
    <node
        name="rqt_gui"
        pkg="rqt_gui"
        type="rqt_gui"
        args="--perspective-file $(find cga_robotics_ros)/config/delta_vel.perspective"
    />

</launch>
